import streamlit as st
import pandas as pd
from openai import OpenAI
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go
import os
import re
import json
import io
import base64
from dotenv import load_dotenv
from prompts import build_prompt

# Th√™m th∆∞ vi·ªán ƒë·ªÉ k·∫øt n·ªëi SQL Server
try:
    import pyodbc
    import sqlalchemy
    SQL_AVAILABLE = True
except ImportError:
    SQL_AVAILABLE = False

# Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# Kh·ªüi t·∫°o OpenAI client
client = OpenAI(api_key=OPENAI_API_KEY)

# C·∫•u h√¨nh giao di·ªán Streamlit
st.set_page_config(page_title="AI Tr·ª£ L√Ω Ph√¢n T√≠ch D·ªØ Li·ªáu", layout="wide")
st.title("üìä AI Tr·ª£ L√Ω Ph√¢n T√≠ch D·ªØ Li·ªáu T·ª± ƒê·ªông")

# Kh·ªüi t·∫°o session state ƒë·ªÉ l∆∞u l·ªãch s·ª≠ h·ªôi tho·∫°i
if "messages" not in st.session_state:
    st.session_state.messages = []

if "df" not in st.session_state:
    st.session_state.df = None

if "data_source" not in st.session_state:
    st.session_state.data_source = "file"

if "sql_tables" not in st.session_state:
    st.session_state.sql_tables = []

if "sql_connection" not in st.session_state:
    st.session_state.sql_connection = {
        "server": "localhost",
        "database": "master",
        "username": None,
        "password": None,
        "use_windows_auth": False
    }

if "visualization_tool" not in st.session_state:
    st.session_state.visualization_tool = "plotly"

# H√†m ƒë·ªÉ l∆∞u bi·ªÉu ƒë·ªì matplotlib th√†nh base64
def fig_to_base64(fig):
    buf = io.BytesIO()
    fig.savefig(buf, format='png', bbox_inches='tight')
    buf.seek(0)
    img_str = base64.b64encode(buf.read()).decode('utf-8')
    return img_str

# H√†m ƒë·ªÉ l∆∞u bi·ªÉu ƒë·ªì plotly th√†nh JSON
def plotly_fig_to_json(fig):
    return fig.to_json()

# H√†m ƒë·ªÉ xu·∫•t d·ªØ li·ªáu cho Power BI (s·ª≠ d·ª•ng CSV)
def export_for_powerbi(df):
    # T·∫°o file CSV trong b·ªô nh·ªõ
    output = io.StringIO()
    df.to_csv(output, index=False)
    return output.getvalue()

# H√†m k·∫øt n·ªëi SQL Server v√† l·∫•y d·ªØ li·ªáu
def connect_to_sql_server(server, database, username=None, password=None, query=None, use_windows_auth=False):
    try:
        # T·∫°o chu·ªói k·∫øt n·ªëi SQLAlchemy
        if use_windows_auth:
            connection_uri = f"mssql+pyodbc://{server}/{database}?driver=ODBC+Driver+17+for+SQL+Server&trusted_connection=yes"
        else:
            connection_uri = f"mssql+pyodbc://{username}:{password}@{server}/{database}?driver=ODBC+Driver+17+for+SQL+Server"
        
        # T·∫°o engine SQLAlchemy
        engine = sqlalchemy.create_engine(connection_uri)
        
        # Th·ª±c thi truy v·∫•n n·∫øu c√≥
        if query:
            df = pd.read_sql(query, engine)
            return df, None
        else:
            return engine, None
    except Exception as e:
        return None, str(e)

# H√†m ƒë·ªÉ l·∫•y danh s√°ch b·∫£ng t·ª´ SQL Server
def get_sql_tables(server, database, username=None, password=None, use_windows_auth=False):
    try:
        # S·ª≠ d·ª•ng h√†m k·∫øt n·ªëi ƒë√£ c√≥
        engine, error = connect_to_sql_server(server, database, username, password, None, use_windows_auth)
        if error:
            return [], error
        
        # Truy v·∫•n ƒë·ªÉ l·∫•y danh s√°ch b·∫£ng
        query = """
        SELECT TABLE_NAME
        FROM INFORMATION_SCHEMA.TABLES
        WHERE TABLE_TYPE = 'BASE TABLE'
        ORDER BY TABLE_NAME
        """
        
        # Th·ª±c thi truy v·∫•n
        tables_df = pd.read_sql(query, engine)
        
        return tables_df['TABLE_NAME'].tolist(), None
    except Exception as e:
        return [], str(e)

# H√†m ƒë·ªÉ l·∫•y c·∫•u tr√∫c b·∫£ng t·ª´ SQL Server
def get_table_structure(server, database, username=None, password=None, table_name=None, use_windows_auth=False):
    try:
        # S·ª≠ d·ª•ng h√†m k·∫øt n·ªëi ƒë√£ c√≥
        engine, error = connect_to_sql_server(server, database, username, password, None, use_windows_auth)
        if error:
            return None, error
        
        # Truy v·∫•n ƒë·ªÉ l·∫•y c·∫•u tr√∫c b·∫£ng
        query = f"""
        SELECT COLUMN_NAME, DATA_TYPE
        FROM INFORMATION_SCHEMA.COLUMNS
        WHERE TABLE_NAME = '{table_name}'
        ORDER BY ORDINAL_POSITION
        """
        
        # Th·ª±c thi truy v·∫•n
        columns_df = pd.read_sql(query, engine)
        
        return columns_df, None
    except Exception as e:
        return None, str(e)

# Sidebar cho t·∫£i d·ªØ li·ªáu v√† c√†i ƒë·∫∑t
with st.sidebar:
    st.header("üìÅ D·ªØ li·ªáu & C√†i ƒë·∫∑t")
    
    # Ch·ªçn ngu·ªìn d·ªØ li·ªáu
    st.session_state.data_source = st.radio(
        "Ch·ªçn ngu·ªìn d·ªØ li·ªáu",
        ["File", "SQL Server"],
        index=0 if st.session_state.data_source == "file" else 1
    ).lower()
    
    if st.session_state.data_source == "file":
        # T·∫£i d·ªØ li·ªáu t·ª´ file
        uploaded_file = st.file_uploader("T·∫£i l√™n file d·ªØ li·ªáu (.csv ho·∫∑c .xlsx)", type=["csv", "xlsx"])
        
        if uploaded_file:
            try:
                if uploaded_file.name.endswith(".csv"):
                    st.session_state.df = pd.read_csv(uploaded_file)
                else:
                    st.session_state.df = pd.read_excel(uploaded_file)
                st.success(f"‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu: {uploaded_file.name}")
                
                # Hi·ªÉn th·ªã th√¥ng tin d·ªØ li·ªáu
                with st.expander("üìä Th√¥ng tin d·ªØ li·ªáu"):
                    st.write(f"S·ªë d√≤ng: {st.session_state.df.shape[0]}")
                    st.write(f"S·ªë c·ªôt: {st.session_state.df.shape[1]}")
                    st.write("C√°c c·ªôt:")
                    st.write(", ".join(st.session_state.df.columns.tolist()))
                    
                # T√πy ch·ªçn xu·∫•t d·ªØ li·ªáu cho Power BI
                if st.session_state.df is not None:
                    st.download_button(
                        label="üì• Xu·∫•t d·ªØ li·ªáu cho Power BI (CSV)",
                        data=export_for_powerbi(st.session_state.df),
                        file_name="data_for_powerbi.csv",
                        mime="text/csv"
                    )
            except Exception as e:
                st.error(f"‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu: {e}")
    
    else:  # SQL Server
        if not SQL_AVAILABLE:
            st.error("‚ö†Ô∏è Th∆∞ vi·ªán c·∫ßn thi·∫øt ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Vui l√≤ng c√†i ƒë·∫∑t b·∫±ng l·ªánh: pip install pyodbc sqlalchemy")
        else:
            # Form k·∫øt n·ªëi SQL Server
            with st.form("sql_connection_form"):
                st.subheader("K·∫øt n·ªëi SQL Server")
                
                # Th√¥ng tin k·∫øt n·ªëi
                server = st.text_input("Server", value="localhost")
                database = st.text_input("Database", value="master")
                
                # Ch·ªçn ph∆∞∆°ng th·ª©c x√°c th·ª±c
                auth_method = st.radio("Ph∆∞∆°ng th·ª©c x√°c th·ª±c", ["SQL Server Authentication", "Windows Authentication"])
                use_windows_auth = auth_method == "Windows Authentication"
                
                # Hi·ªÉn th·ªã tr∆∞·ªùng username/password n·∫øu d√πng SQL Server Authentication
                username = None
                password = None
                if not use_windows_auth:
                    username = st.text_input("Username", value="sa")
                    password = st.text_input("Password", type="password")
                
                # N√∫t k·∫øt n·ªëi
                submit_button = st.form_submit_button("K·∫øt n·ªëi")
                
                if submit_button:
                    tables, error = get_sql_tables(server, database, username, password, use_windows_auth)
                    if error:
                        st.error(f"‚ùå L·ªói k·∫øt n·ªëi: {error}")
                    else:
                        st.session_state.sql_tables = tables
                        st.success(f"‚úÖ ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng! T√¨m th·∫•y {len(tables)} b·∫£ng.")
                        # L∆∞u th√¥ng tin k·∫øt n·ªëi v√†o session state ƒë·ªÉ s·ª≠ d·ª•ng sau n√†y
                        st.session_state.sql_connection = {
                            "server": server,
                            "database": database,
                            "username": username,
                            "password": password,
                            "use_windows_auth": use_windows_auth
                        }
            
            # N·∫øu ƒë√£ k·∫øt n·ªëi th√†nh c√¥ng
            if st.session_state.sql_tables:
                # Ch·ªçn b·∫£ng ho·∫∑c nh·∫≠p truy v·∫•n SQL
                query_type = st.radio("Ch·ªçn c√°ch l·∫•y d·ªØ li·ªáu", ["Ch·ªçn b·∫£ng", "Nh·∫≠p truy v·∫•n SQL"])
                
                if query_type == "Ch·ªçn b·∫£ng":
                    selected_table = st.selectbox("Ch·ªçn b·∫£ng", st.session_state.sql_tables)
                    
                    if selected_table:
                        # L·∫•y th√¥ng tin k·∫øt n·ªëi t·ª´ session state
                        conn_info = st.session_state.sql_connection
                        
                        # Hi·ªÉn th·ªã c·∫•u tr√∫c b·∫£ng
                        columns_df, error = get_table_structure(
                            conn_info["server"], 
                            conn_info["database"], 
                            conn_info["username"], 
                            conn_info["password"], 
                            selected_table,
                            conn_info["use_windows_auth"]
                        )
                        if error:
                            st.error(f"‚ùå L·ªói khi l·∫•y c·∫•u tr√∫c b·∫£ng: {error}")
                        else:
                            with st.expander("C·∫•u tr√∫c b·∫£ng"):
                                st.dataframe(columns_df)
                        
                        # T·∫°o truy v·∫•n SQL t·ª´ b·∫£ng ƒë√£ ch·ªçn
                        query = f"SELECT * FROM [{selected_table}]"
                        
                        # N√∫t ƒë·ªÉ l·∫•y d·ªØ li·ªáu
                        if st.button("L·∫•y d·ªØ li·ªáu t·ª´ b·∫£ng"):
                            df, error = connect_to_sql_server(
                                conn_info["server"], 
                                conn_info["database"], 
                                conn_info["username"], 
                                conn_info["password"], 
                                query,
                                conn_info["use_windows_auth"]
                            )
                            if error:
                                st.error(f"‚ùå L·ªói khi truy v·∫•n d·ªØ li·ªáu: {error}")
                            else:
                                st.session_state.df = df
                                st.success(f"‚úÖ ƒê√£ l·∫•y {df.shape[0]} d√≤ng d·ªØ li·ªáu t·ª´ b·∫£ng {selected_table}")
                
                else:  # Nh·∫≠p truy v·∫•n SQL
                    query = st.text_area("Nh·∫≠p truy v·∫•n SQL", height=150, 
                                        value="SELECT TOP 1000 * FROM YourTableName")
                    
                    # N√∫t ƒë·ªÉ th·ª±c thi truy v·∫•n
                    if st.button("Th·ª±c thi truy v·∫•n"):
                        # L·∫•y th√¥ng tin k·∫øt n·ªëi t·ª´ session state
                        conn_info = st.session_state.sql_connection
                        
                        df, error = connect_to_sql_server(
                            conn_info["server"], 
                            conn_info["database"], 
                            conn_info["username"], 
                            conn_info["password"], 
                            query,
                            conn_info["use_windows_auth"]
                        )
                        if error:
                            st.error(f"‚ùå L·ªói khi th·ª±c thi truy v·∫•n: {error}")
                        else:
                            st.session_state.df = df
                            st.success(f"‚úÖ ƒê√£ l·∫•y {df.shape[0]} d√≤ng d·ªØ li·ªáu t·ª´ truy v·∫•n")
                
                # Hi·ªÉn th·ªã th√¥ng tin d·ªØ li·ªáu n·∫øu c√≥
                if st.session_state.df is not None:
                    with st.expander("üìä Th√¥ng tin d·ªØ li·ªáu"):
                        st.write(f"S·ªë d√≤ng: {st.session_state.df.shape[0]}")
                        st.write(f"S·ªë c·ªôt: {st.session_state.df.shape[1]}")
                        st.write("C√°c c·ªôt:")
                        st.write(", ".join(st.session_state.df.columns.tolist()))
                    
                    # T√πy ch·ªçn xu·∫•t d·ªØ li·ªáu cho Power BI
                    st.download_button(
                        label="üì• Xu·∫•t d·ªØ li·ªáu cho Power BI (CSV)",
                        data=export_for_powerbi(st.session_state.df),
                        file_name="data_for_powerbi.csv",
                        mime="text/csv"
                    )
    
    # Ch·ªçn c√¥ng c·ª• tr·ª±c quan h√≥a
    st.session_state.visualization_tool = st.radio(
        "C√¥ng c·ª• tr·ª±c quan h√≥a",
        ["Plotly/Matplotlib", "Power BI"]
    )
    
    # C√†i ƒë·∫∑t model
    model = st.selectbox(
        "Ch·ªçn model AI",
        ["gpt-4", "gpt-3.5-turbo"],
        index=0
    )
    
    # N√∫t x√≥a l·ªãch s·ª≠
    if st.button("üóëÔ∏è X√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i"):
        st.session_state.messages = []
        st.success("ƒê√£ x√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i")

# Hi·ªÉn th·ªã d·ªØ li·ªáu n·∫øu c√≥
if st.session_state.df is not None:
    with st.expander("Xem d·ªØ li·ªáu"):
        st.dataframe(st.session_state.df.head(10))

# Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n Power BI n·∫øu ƒë∆∞·ª£c ch·ªçn
if st.session_state.visualization_tool == "Power BI":
    with st.expander("üîç H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Power BI", expanded=True):
        col1, col2 = st.columns([1, 1])
        
        with col1:
            st.markdown("""
            ### C√°ch s·ª≠ d·ª•ng d·ªØ li·ªáu v·ªõi Power BI:
            
            1. Nh·∫•n n√∫t **üì• Xu·∫•t d·ªØ li·ªáu cho Power BI (CSV)** ·ªü sidebar ƒë·ªÉ t·∫£i xu·ªëng file CSV
            2. M·ªü Power BI Desktop tr√™n m√°y t√≠nh c·ªßa b·∫°n
            3. Ch·ªçn **Get Data** > **Text/CSV** v√† ch·ªçn file v·ª´a t·∫£i xu·ªëng
            4. Ch·ªçn c√°c t√πy ch·ªçn ph√π h·ª£p v√† nh·∫•n **Load**
            5. B·∫Øt ƒë·∫ßu t·∫°o c√°c bi·ªÉu ƒë·ªì trong Power BI
            """)
        
        with col2:
            if st.session_state.df is not None:
                st.markdown("### V√≠ d·ª• v·ªÅ m√£ DAX cho Power BI:")
                # T·∫°o v√≠ d·ª• DAX
                columns = st.session_state.df.columns.tolist()
                numeric_cols = st.session_state.df.select_dtypes(include=['number']).columns.tolist()
                date_cols = [col for col in columns if 'date' in col.lower() or 'time' in col.lower()]
                
                dax_examples = []
                
                # T·∫°o v√≠ d·ª• v·ªÅ t√≠nh t·ªïng
                if numeric_cols:
                    dax_examples.append(f"T·ªïng {numeric_cols[0]} = SUM(Data[{numeric_cols[0]}])")
                
                # T·∫°o v√≠ d·ª• v·ªÅ t√≠nh trung b√¨nh
                if numeric_cols:
                    dax_examples.append(f"Trung b√¨nh {numeric_cols[0]} = AVERAGE(Data[{numeric_cols[0]}])")
                
                # T·∫°o v√≠ d·ª• v·ªÅ ƒë·∫øm
                if columns:
                    dax_examples.append(f"S·ªë l∆∞·ª£ng = COUNTROWS(Data)")
                
                # T·∫°o v√≠ d·ª• v·ªÅ l·ªçc theo th·ªùi gian
                if date_cols and numeric_cols:
                    dax_examples.append(f"""T·ªïng {numeric_cols[0]} nƒÉm hi·ªán t·∫°i = 
CALCULATE(
    SUM(Data[{numeric_cols[0]}]),
    YEAR(Data[{date_cols[0]}]) = YEAR(TODAY())
)""")
                
                for example in dax_examples:
                    st.code(example, language="dax")

# Hi·ªÉn th·ªã l·ªãch s·ª≠ h·ªôi tho·∫°i
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])
        
        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì n·∫øu c√≥
        if message["role"] == "assistant" and "chart_type" in message:
            if message["chart_type"] == "plotly":
                # Kh√¥i ph·ª•c bi·ªÉu ƒë·ªì plotly t·ª´ JSON
                fig_json = message["chart_data"]
                fig_dict = json.loads(fig_json)
                fig = go.Figure(fig_dict)
                st.plotly_chart(fig, use_container_width=True)
            
            elif message["chart_type"] == "matplotlib":
                # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì matplotlib t·ª´ base64
                img_str = message["chart_data"]
                st.image(f"data:image/png;base64,{img_str}", use_container_width=True)
            
            elif message["chart_type"] == "powerbi":
                # Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n Power BI
                st.info("üí° D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c chu·∫©n b·ªã cho Power BI. T·∫£i xu·ªëng t·ª´ sidebar v√† l√†m theo h∆∞·ªõng d·∫´n.")

# Nh·∫≠p c√¢u h·ªèi m·ªõi
if prompt := st.chat_input("Nh·∫≠p c√¢u h·ªèi ho·∫∑c y√™u c·∫ßu ph√¢n t√≠ch..."):
    # Ki·ªÉm tra xem ƒë√£ t·∫£i d·ªØ li·ªáu ch∆∞a
    if st.session_state.df is None:
        st.error("‚ö†Ô∏è Vui l√≤ng t·∫£i d·ªØ li·ªáu tr∆∞·ªõc khi ƒë·∫∑t c√¢u h·ªèi!")
    else:
        # Hi·ªÉn th·ªã c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
        with st.chat_message("user"):
            st.markdown(prompt)
        
        # L∆∞u c√¢u h·ªèi v√†o l·ªãch s·ª≠
        st.session_state.messages.append({"role": "user", "content": prompt})
        
        # X·ª≠ l√Ω c√¢u h·ªèi
        with st.chat_message("assistant"):
            with st.spinner("ü§ñ ƒêang x·ª≠ l√Ω..."):
                # Ph√¢n lo·∫°i y√™u c·∫ßu: v·∫Ω bi·ªÉu ƒë·ªì ho·∫∑c tr·∫£ l·ªùi c√¢u h·ªèi
                is_visualization_request = any(keyword in prompt.lower() for keyword in 
                                             ["v·∫Ω", "bi·ªÉu ƒë·ªì", "chart", "plot", "visualize", "graph", "tr·ª±c quan"])
                
                if is_visualization_request:
                    if st.session_state.visualization_tool == "Power BI":
                        # X·ª≠ l√Ω y√™u c·∫ßu Power BI
                        powerbi_instructions = f"""
                        ### H∆∞·ªõng d·∫´n t·∫°o bi·ªÉu ƒë·ªì trong Power BI cho y√™u c·∫ßu: "{prompt}"
                        
                        1. **T·∫£i d·ªØ li·ªáu**: Nh·∫•n n√∫t "üì• Xu·∫•t d·ªØ li·ªáu cho Power BI (CSV)" ·ªü sidebar
                        2. **M·ªü Power BI Desktop** v√† nh·∫≠p d·ªØ li·ªáu t·ª´ file CSV v·ª´a t·∫£i xu·ªëng
                        3. **T·∫°o bi·ªÉu ƒë·ªì**:
                        """
                        
                        # Ph√¢n t√≠ch y√™u c·∫ßu ƒë·ªÉ ƒë∆∞a ra g·ª£i √Ω c·ª• th·ªÉ cho Power BI
                        try:
                            analysis_prompt = f"""
                            B·∫°n l√† chuy√™n gia v·ªÅ Power BI. H√£y ƒë∆∞a ra h∆∞·ªõng d·∫´n c·ª• th·ªÉ ƒë·ªÉ t·∫°o bi·ªÉu ƒë·ªì trong Power BI d·ª±a tr√™n y√™u c·∫ßu sau:
                            
                            Y√™u c·∫ßu: {prompt}
                            
                            D·ªØ li·ªáu c√≥ c√°c c·ªôt: {', '.join(st.session_state.df.columns.tolist())}
                            
                            H√£y ƒë∆∞a ra h∆∞·ªõng d·∫´n t·ª´ng b∆∞·ªõc ƒë·ªÉ t·∫°o bi·ªÉu ƒë·ªì trong Power BI, bao g·ªìm:
                            1. Lo·∫°i bi·ªÉu ƒë·ªì n√™n s·ª≠ d·ª•ng
                            2. C√°c tr∆∞·ªùng d·ªØ li·ªáu n√™n ƒë·∫∑t v√†o tr·ª•c n√†o
                            3. C√°c b·ªô l·ªçc n√™n √°p d·ª•ng (n·∫øu c√≥)
                            4. C√°c t√≠nh to√°n DAX c·∫ßn thi·∫øt (n·∫øu c√≥)
                            
                            Ch·ªâ ƒë∆∞a ra h∆∞·ªõng d·∫´n c·ª• th·ªÉ, kh√¥ng gi·∫£i th√≠ch l√Ω do.
                            """
                            
                            response = client.chat.completions.create(
                                model=model,
                                messages=[
                                    {"role": "system", "content": "B·∫°n l√† chuy√™n gia v·ªÅ Power BI."},
                                    {"role": "user", "content": analysis_prompt},
                                ],
                                temperature=0.3,
                            )
                            
                            powerbi_steps = response.choices[0].message.content
                            powerbi_instructions += powerbi_steps
                            
                            # Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n
                            st.markdown(powerbi_instructions)
                            
                            # T·∫°o n√∫t t·∫£i xu·ªëng d·ªØ li·ªáu
                            st.download_button(
                                label="üì• T·∫£i d·ªØ li·ªáu cho ph√¢n t√≠ch n√†y",
                                data=export_for_powerbi(st.session_state.df),
                                file_name="data_for_powerbi_analysis.csv",
                                mime="text/csv"
                            )
                            
                            # L∆∞u k·∫øt qu·∫£ v√†o l·ªãch s·ª≠
                            result_message = {
                                "role": "assistant", 
                                "content": powerbi_instructions,
                                "chart_type": "powerbi",
                                "chart_data": ""
                            }
                            st.session_state.messages.append(result_message)
                            
                        except Exception as e:
                            error_message = f"‚ùå L·ªói khi t·∫°o h∆∞·ªõng d·∫´n Power BI: {e}"
                            st.error(error_message)
                            st.session_state.messages.append({"role": "assistant", "content": error_message})
                    
                    else:
                        # X·ª≠ l√Ω y√™u c·∫ßu v·∫Ω bi·ªÉu ƒë·ªì b·∫±ng Plotly/Matplotlib
                        viz_prompt = build_prompt(prompt, st.session_state.df.head().to_string())
                        
                        try:
                            # G·ªçi GPT ƒë·ªÉ sinh code
                            response = client.chat.completions.create(
                                model=model,
                                messages=[
                                    {"role": "system", "content": "B·∫°n l√† chuy√™n gia ph√¢n t√≠ch d·ªØ li·ªáu."},
                                    {"role": "user", "content": viz_prompt},
                                ],
                                temperature=0.3,
                            )
                            
                            # L·∫•y n·ªôi dung tr·∫£ v·ªÅ
                            raw_code = response.choices[0].message.content
                            
                            # Lo·∫°i b·ªè markdown (```python ... ```) n·∫øu c√≥
                            code_match = re.search(r"```python(.*?)```", raw_code, re.DOTALL)
                            if code_match:
                                code = code_match.group(1).strip()
                            else:
                                # Fallback if no markdown block is found
                                code = raw_code.strip()
                            
                            # Hi·ªÉn th·ªã code
                            st.code(code, language='python')
                            
                            # Chu·∫©n b·ªã bi·∫øn th·ª±c thi
                            local_vars = {"df": st.session_state.df, "plt": plt, "px": px}
                            
                            # Th·ª±c thi code
                            exec(code, {}, local_vars)
                            
                            # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì v√† l∆∞u d·ªØ li·ªáu bi·ªÉu ƒë·ªì
                            chart_type = None
                            chart_data = None
                            
                            if "fig" in local_vars:
                                # X·ª≠ l√Ω bi·ªÉu ƒë·ªì plotly
                                fig = local_vars["fig"]
                                st.plotly_chart(fig, use_container_width=True)
                                chart_type = "plotly"
                                chart_data = plotly_fig_to_json(fig)
                            elif plt.get_fignums():
                                # X·ª≠ l√Ω bi·ªÉu ƒë·ªì matplotlib
                                fig = plt.gcf()
                                st.pyplot(fig)
                                chart_type = "matplotlib"
                                chart_data = fig_to_base64(fig)
                                plt.clf()
                            else:
                                st.warning("‚ö†Ô∏è Kh√¥ng c√≥ bi·ªÉu ƒë·ªì n√†o ƒë∆∞·ª£c t·∫°o.")
                            
                            # L∆∞u k·∫øt qu·∫£ v√†o l·ªãch s·ª≠
                            result_message = {
                                "role": "assistant", 
                                "content": f"ƒê√¢y l√† bi·ªÉu ƒë·ªì theo y√™u c·∫ßu c·ªßa b·∫°n:\n\n```python\n{code}\n```",
                                "chart_type": chart_type,
                                "chart_data": chart_data
                            }
                            st.session_state.messages.append(result_message)
                            
                        except Exception as e:
                            error_message = f"‚ùå L·ªói khi th·ª±c thi code: {e}"
                            st.error(error_message)
                            st.session_state.messages.append({"role": "assistant", "content": error_message})
                
                else:
                    # X·ª≠ l√Ω c√¢u h·ªèi th√¥ng th∆∞·ªùng
                    try:
                        # Chu·∫©n b·ªã prompt v·ªõi th√¥ng tin v·ªÅ d·ªØ li·ªáu
                        df_info = f"""
                        Th√¥ng tin v·ªÅ d·ªØ li·ªáu:
                        - S·ªë d√≤ng: {st.session_state.df.shape[0]}
                        - S·ªë c·ªôt: {st.session_state.df.shape[1]}
                        - C√°c c·ªôt: {', '.join(st.session_state.df.columns.tolist())}
                        - D·ªØ li·ªáu m·∫´u (5 d√≤ng ƒë·∫ßu):
                        {st.session_state.df.head().to_string()}
                        """
                        
                        qa_prompt = f"""
                        B·∫°n l√† tr·ª£ l√Ω AI ph√¢n t√≠ch d·ªØ li·ªáu. H√£y tr·∫£ l·ªùi c√¢u h·ªèi sau d·ª±a tr√™n d·ªØ li·ªáu ƒë∆∞·ª£c cung c·∫•p:
                        
                        C√¢u h·ªèi: {prompt}
                        
                        {df_info}
                        
                        H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, r√µ r√†ng v√† cung c·∫•p th√¥ng tin h·ªØu √≠ch t·ª´ d·ªØ li·ªáu.
                        """
                        
                        # G·ªçi API ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi
                        response = client.chat.completions.create(
                            model=model,
                            messages=[
                                {"role": "system", "content": "B·∫°n l√† chuy√™n gia ph√¢n t√≠ch d·ªØ li·ªáu."},
                                {"role": "user", "content": qa_prompt},
                            ],
                            temperature=0.3,
                        )
                        
                        # Hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi
                        answer = response.choices[0].message.content
                        st.markdown(answer)
                        
                        # L∆∞u c√¢u tr·∫£ l·ªùi v√†o l·ªãch s·ª≠
                        st.session_state.messages.append({"role": "assistant", "content": answer})
                        
                    except Exception as e:
                        error_message = f"‚ùå L·ªói khi x·ª≠ l√Ω c√¢u h·ªèi: {e}"
                        st.error(error_message)
                        st.session_state.messages.append({"role": "assistant", "content": error_message})